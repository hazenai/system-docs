{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Hazen.ai System Documentation Image Cache sensor_type - 'rtsp' is used for rtsp stream, file is used for video file source, roseek for roseek camera cam_id - file path or stream addresss encoder - video reader encoder, supported values are \"gstreamer\", \"ffmpeg\" & \"v4l2\" DEFAULT is \"ffmpeg\" hardware_wait_sec - timeout value in seconds if the frame reading process from source is interrupted delay_for_rtsp_ms - delay introduced in frames in case of video file, should be 0 for rtsp source_frame_rate - should only be set for ROSEEK, doesn't do anything in case of video file and rtsp stream jpeg_encoding - set to true if jpeg encoding is used in the pipeline size - capacity of image cache in frames debug_log - sets the debug log level to true or false, default log leve is INFO video_frame_rate - sets the debug log level to true or false, default log leve is INFO color - color format of frames, can be true or false grpc_server_host - default 0.0.0.0 grpc_server_port - default 5000 threshold_ms - default 1000000 server_wait_sec - default 15 publish_on_redis - this parameter is true if a client requires a latest frame, should be false for ALPR cameras redis_server_host - default 0.0.0.0 redis_server_port - default 7000 redis_topic - default \"source_frames\" redis_timeout - default 2 Object Detector stream_type - 'gRPC' used to get images from image-cache and other options are rtsp, udp and file stream_address - file path or stream addresss sitename_camname - name of site timezone_of_video_file - in case of file, this is to specify the timezone of file. timeout_to_read_frame_sec - timeout value in seconds if the frame reading process from source is interrupted delay_to_getframe_ms - value in milliseconds to slow down frame reading process. jpeg_encoded - set to true if jpeg encoding is used in image-cache. pre_processor_type - specify the preprocessor you want to use depend upon the problem. possible values are traffic , seatbelt_mobilephone and trajectory . img_resize_width - set width to which you want to resize image in 'traffic' preprocessor. img_resize_height - set height to which you want to resize image in 'traffic' preprocessor. change_color_space_to_rgb - set true if want to change BGR image to RGB. increase_larger_side_by_factor - default 0.25, only for TLPD, to increase BBox of traffic light. increase_smaller_side_by_factor - default 0.25, only for TLPD, to increase BBox of traffic light. std_for_preprocess_img - default [0.229, 0.224, 0.225], set values to perform std of image. only for TLPD mean_for_preprocess_img - default [0.229, 0.224, 0.225], set values to perform mean of image. only for TLPD traffic_light_config - path to trafficlights.json file. do_resize_in_preprocessor - set true if you want to do resizing in preprocessor. infer_type - default 'tensorrt' for gpu based inference and openvino20 for cpu based infer. output_node_ids - only for openvino20 infer, depends upon engine. engine_file_path - path to engine file without extensions. batch_size - batch size passed to inference. trt_gpu_workspace_size - default '2.4' set trt gpu workspace size in Gibs enable_trt_preprocessor - set true if want to perform gpu based preprocessing. trt_preprocessor_input_dims - default [1080,1920,3] image dims, passed to gpu preprocessor in NHWC (Height, Width, channels) format. image_dims_infer_engine - default [3,1080,1980] image dims on which main infer engine will work in NCHW (channels, width, Height) format. post_processor_type - postprocessor you want. possible values are tlstatus , seatbelt_mobilephone and trajectory all_states - [\"red\", \"green\", \"yellow\", \"black\"], only for tlstatus to represent all states of trafficlight. class_map - \"0,1,2,3|black,green,red,yellow\" To represent infer result with respective classes. Before '|' is output of infer and after are the respective classes. state_machine_type - 'dynamic', only for tlstatus postprocessor. possible values dynamic and constant yellow_ticks_statemachine - default 18, only for tlstatus postprocessor yellow_tol_statemachine - default 5 green_th_state_statemachine - default 2 invalid_th_statemachine - default 10 yellow_floor_th_statemachine - default 2 yellow_ceil_th_statemachine - default 5 yellow_hist_buffer_statemachine - default 10 thres_hold_statemachine - default 1 group_count - default 2, total groups of trafficlight. lights_per_group - default [5, 0], total lights per group. classification_threshold - default 0.45, classification threshold for tlstatus postprocessor sensor_fusion_type - default 'majority', possible values are mean and majority debug_log - set true if want to see debug logs redis_host - redis host on which redis-server is running redis_port - port redis-server is running connection_timeout_secs - timeout value in seconds to connect to redis. topic - topic on which OD will publish packages. output_type - Specify type on which you want to get output of OD. Possible values are redis, mqtt and system_v_queue( only working for one specific case) group1_queue_id - queue id of system-v-queue on which want to get phase change status of group1(only for one specific case) group2_queue_id - queue id of system-v-queue on which want to get phase change status of group2(only for one specific case) config_trigger_queue - queue id on which OD will get notification about config change. (only for specific case) Object Tracker tracker_type - default 'hazenv2' use_objectness_score - For SBMP deployment use False , True otherwise tracked_classes - Tracker will track these classes for label smoothing. vehicle_type for trajectory and seatbelt|mobile_phone for SBMP log_level - default INFO, other value can be DEBUG redis_host - default 0.0.0.0, IP/domain of redis server redis_port - default 6379, port at which redis server is accessible listen_topic - tracker will subscribe to this topic for listening detections publish_topic - tracker will publish tracks to this topic sigma_l (float) - low score detection threshold sigma_iou (float) - default -0.05 sigma_len (int) - minimum track length in frames sigma_p (int) - maximum frames a track remains pending before termination sigma_h (float) - At least one detection in a track should have score greater than this output_pending_tracks - default False motion_model - default 'cppkalman' association_model - default 'hungarian' cost_model - default 'iou' Violation Service Aggregator camera_cache_mapping - request_image_encoding - Get image of specific encoding. Typical values are jpg , png . request_image_offset_allowed_ms - queue_address - queue_port - queue_qos - queue_keep_alive - queue_event_topic - queue_violation_service_topic - queue_publisher_service_topic - event_storage_expiry - container_storage - log_level - generate_dummy_violation - map_to_wrongturn - map_to_runningredlight - map_to_trespass_zebra - map_to_cellphone - map_to_seatbelt - publish_violations - redis_host - redis_port - Publisher package_receive_topic - edge_mqtt_address - edge_mqtt_port - package_receive_queue_qos - package_receive_queue_keep_alive - container_storage - cloud_mqtt_address - cloud_mqtt_port - cloud_publish_topic - cloud_queue_qos - cloud_queue_keep_alive - log_level - remote_publisher_enable_ssl - ca_certs - client_cert - client_key - redis_host - redis_port","title":"Config Documentation"},{"location":"#welcome-to-hazenai-system-documentation","text":"","title":"Welcome to Hazen.ai System Documentation"},{"location":"#image-cache","text":"sensor_type - 'rtsp' is used for rtsp stream, file is used for video file source, roseek for roseek camera cam_id - file path or stream addresss encoder - video reader encoder, supported values are \"gstreamer\", \"ffmpeg\" & \"v4l2\" DEFAULT is \"ffmpeg\" hardware_wait_sec - timeout value in seconds if the frame reading process from source is interrupted delay_for_rtsp_ms - delay introduced in frames in case of video file, should be 0 for rtsp source_frame_rate - should only be set for ROSEEK, doesn't do anything in case of video file and rtsp stream jpeg_encoding - set to true if jpeg encoding is used in the pipeline size - capacity of image cache in frames debug_log - sets the debug log level to true or false, default log leve is INFO video_frame_rate - sets the debug log level to true or false, default log leve is INFO color - color format of frames, can be true or false grpc_server_host - default 0.0.0.0 grpc_server_port - default 5000 threshold_ms - default 1000000 server_wait_sec - default 15 publish_on_redis - this parameter is true if a client requires a latest frame, should be false for ALPR cameras redis_server_host - default 0.0.0.0 redis_server_port - default 7000 redis_topic - default \"source_frames\" redis_timeout - default 2","title":"Image Cache"},{"location":"#object-detector","text":"stream_type - 'gRPC' used to get images from image-cache and other options are rtsp, udp and file stream_address - file path or stream addresss sitename_camname - name of site timezone_of_video_file - in case of file, this is to specify the timezone of file. timeout_to_read_frame_sec - timeout value in seconds if the frame reading process from source is interrupted delay_to_getframe_ms - value in milliseconds to slow down frame reading process. jpeg_encoded - set to true if jpeg encoding is used in image-cache. pre_processor_type - specify the preprocessor you want to use depend upon the problem. possible values are traffic , seatbelt_mobilephone and trajectory . img_resize_width - set width to which you want to resize image in 'traffic' preprocessor. img_resize_height - set height to which you want to resize image in 'traffic' preprocessor. change_color_space_to_rgb - set true if want to change BGR image to RGB. increase_larger_side_by_factor - default 0.25, only for TLPD, to increase BBox of traffic light. increase_smaller_side_by_factor - default 0.25, only for TLPD, to increase BBox of traffic light. std_for_preprocess_img - default [0.229, 0.224, 0.225], set values to perform std of image. only for TLPD mean_for_preprocess_img - default [0.229, 0.224, 0.225], set values to perform mean of image. only for TLPD traffic_light_config - path to trafficlights.json file. do_resize_in_preprocessor - set true if you want to do resizing in preprocessor. infer_type - default 'tensorrt' for gpu based inference and openvino20 for cpu based infer. output_node_ids - only for openvino20 infer, depends upon engine. engine_file_path - path to engine file without extensions. batch_size - batch size passed to inference. trt_gpu_workspace_size - default '2.4' set trt gpu workspace size in Gibs enable_trt_preprocessor - set true if want to perform gpu based preprocessing. trt_preprocessor_input_dims - default [1080,1920,3] image dims, passed to gpu preprocessor in NHWC (Height, Width, channels) format. image_dims_infer_engine - default [3,1080,1980] image dims on which main infer engine will work in NCHW (channels, width, Height) format. post_processor_type - postprocessor you want. possible values are tlstatus , seatbelt_mobilephone and trajectory all_states - [\"red\", \"green\", \"yellow\", \"black\"], only for tlstatus to represent all states of trafficlight. class_map - \"0,1,2,3|black,green,red,yellow\" To represent infer result with respective classes. Before '|' is output of infer and after are the respective classes. state_machine_type - 'dynamic', only for tlstatus postprocessor. possible values dynamic and constant yellow_ticks_statemachine - default 18, only for tlstatus postprocessor yellow_tol_statemachine - default 5 green_th_state_statemachine - default 2 invalid_th_statemachine - default 10 yellow_floor_th_statemachine - default 2 yellow_ceil_th_statemachine - default 5 yellow_hist_buffer_statemachine - default 10 thres_hold_statemachine - default 1 group_count - default 2, total groups of trafficlight. lights_per_group - default [5, 0], total lights per group. classification_threshold - default 0.45, classification threshold for tlstatus postprocessor sensor_fusion_type - default 'majority', possible values are mean and majority debug_log - set true if want to see debug logs redis_host - redis host on which redis-server is running redis_port - port redis-server is running connection_timeout_secs - timeout value in seconds to connect to redis. topic - topic on which OD will publish packages. output_type - Specify type on which you want to get output of OD. Possible values are redis, mqtt and system_v_queue( only working for one specific case) group1_queue_id - queue id of system-v-queue on which want to get phase change status of group1(only for one specific case) group2_queue_id - queue id of system-v-queue on which want to get phase change status of group2(only for one specific case) config_trigger_queue - queue id on which OD will get notification about config change. (only for specific case)","title":"Object Detector"},{"location":"#object-tracker","text":"tracker_type - default 'hazenv2' use_objectness_score - For SBMP deployment use False , True otherwise tracked_classes - Tracker will track these classes for label smoothing. vehicle_type for trajectory and seatbelt|mobile_phone for SBMP log_level - default INFO, other value can be DEBUG redis_host - default 0.0.0.0, IP/domain of redis server redis_port - default 6379, port at which redis server is accessible listen_topic - tracker will subscribe to this topic for listening detections publish_topic - tracker will publish tracks to this topic sigma_l (float) - low score detection threshold sigma_iou (float) - default -0.05 sigma_len (int) - minimum track length in frames sigma_p (int) - maximum frames a track remains pending before termination sigma_h (float) - At least one detection in a track should have score greater than this output_pending_tracks - default False motion_model - default 'cppkalman' association_model - default 'hungarian' cost_model - default 'iou'","title":"Object Tracker"},{"location":"#violation-service","text":"","title":"Violation Service"},{"location":"#aggregator","text":"camera_cache_mapping - request_image_encoding - Get image of specific encoding. Typical values are jpg , png . request_image_offset_allowed_ms - queue_address - queue_port - queue_qos - queue_keep_alive - queue_event_topic - queue_violation_service_topic - queue_publisher_service_topic - event_storage_expiry - container_storage - log_level - generate_dummy_violation - map_to_wrongturn - map_to_runningredlight - map_to_trespass_zebra - map_to_cellphone - map_to_seatbelt - publish_violations - redis_host - redis_port -","title":"Aggregator"},{"location":"#publisher","text":"package_receive_topic - edge_mqtt_address - edge_mqtt_port - package_receive_queue_qos - package_receive_queue_keep_alive - container_storage - cloud_mqtt_address - cloud_mqtt_port - cloud_publish_topic - cloud_queue_qos - cloud_queue_keep_alive - log_level - remote_publisher_enable_ssl - ca_certs - client_cert - client_key - redis_host - redis_port","title":"Publisher"},{"location":"flash/","text":"Guidlines to flash edge devices Axiomtek eBOX800-900-FL (Jetson TX2) Arrange a Host device (running ubuntu) Download Linux_for_Tegra_JP4.4_87900_T004.tar.gz from here on host device. Extract the downloaded file tar -xvzf Linux_for_Tegra_JP4.4_87900_T004.tar.gz . change directory cd Linux_for_Tegra_JP4.4_87900_T004/Linux_for_Tegra . Turn upside down the Axiomtek TX2 box and remove screws. Connect the micro usb cable from micro usb port on axiomtek TX2 (on CN7) to usb port on host device. Make the TX2 in recovery mode. See the process here On host device, run sudo ./flash.sh jetson-tx2 mmcblk0p1 . Wait till flashing is down. Remove tx2 from recovery mode and enable it to boot from internal eMMC by rebooting.","title":"Flashing Instructions"},{"location":"flash/#guidlines-to-flash-edge-devices","text":"","title":"Guidlines to flash edge devices"},{"location":"flash/#axiomtek-ebox800-900-fl-jetson-tx2","text":"Arrange a Host device (running ubuntu) Download Linux_for_Tegra_JP4.4_87900_T004.tar.gz from here on host device. Extract the downloaded file tar -xvzf Linux_for_Tegra_JP4.4_87900_T004.tar.gz . change directory cd Linux_for_Tegra_JP4.4_87900_T004/Linux_for_Tegra . Turn upside down the Axiomtek TX2 box and remove screws. Connect the micro usb cable from micro usb port on axiomtek TX2 (on CN7) to usb port on host device. Make the TX2 in recovery mode. See the process here On host device, run sudo ./flash.sh jetson-tx2 mmcblk0p1 . Wait till flashing is down. Remove tx2 from recovery mode and enable it to boot from internal eMMC by rebooting.","title":"Axiomtek eBOX800-900-FL (Jetson TX2)"},{"location":"installation/","text":"Basic Installation Guide for Seatbelt and Mobile phone System Deployment Prerequisites Edge device is flashed with Nvidia JetPack 4.4.0 (Make sure Jetson SDK Components are also installed) Internet Storage (at least 32GB) Edge Script Installtion Power Up your edge device and connect keyboard, mouse, monitor etc. Open terminal CTRL + ALT + T . Check if python3 is installed on device python3 --version . If not follow this link to install Check if nvidia-container-runtime is installed nvidia-container-runtime --version . If it's not installed, then install # Add the package repositories curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # nvidia-container-runtime installation sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit nvidia-container-runtime sudo systemctl restart docker Download Edge Scripts wget GET_LINK_FROM_ABDULLAH Uncompress the downloaded file tar -xvzf AutoDeployment-1.2.0.tar.gz Change directory cd AutoDeployment-1.2.0/edge/ . Check if install.py and dependencies.yaml is present. Running the Edge Script RUN the install script sudo python3 install.py -d -p . -d flag will install system dependencies like docker, docker-compose and -p flag will set power mode on jetson devices. Now, answer the questions asked in command line. Select storage disk. Choose SD card NAME SIZE MOUNTPOINT UUID mmcblk0p1 14G / eda65433-df7c-4de9-8c4b-9ab2865b4f24 mmcblk1p1 234.7G /media/sdcard a10a85fe-a451-dd4c-b3b0-6862eb17eb56 Choose which disk to use for deployment[1-2]: 2 Select problem type Select the problem you want to deploy: 0: Video Light Phase Detection 1: SeatBelt/MobilePhone 2: Trajectory [0-2]: 1 Type your company name Please enter your company's name: hazenclient Select Power mode on Jetson devices. choose with id=2 ################ Collecting Hardware Info ####################### ## Power Model Selection on Jetson Devices ## ID=0 NAME=MODE_15W_2CORE ID=1 NAME=MODE_15W_4CORE ID=2 NAME=MODE_15W_6CORE ID=3 NAME=MODE_10W_2CORE ID=4 NAME=MODE_10W_4CORE Select Power Model. ID: 2 Now, script will start installing system dependencies. After system dependencies installation, script will install required services. This process may take 20-30 mins . Running the services Move to following directory cd $SD_CARD_MOUNTPOINT/hazen-test/imagetars/$COMPANY_NAME/ . For example, in this case, I will move to cd /media/sdcard/hazen-test/imagetars/hazenclient/ Run the following command sudo cp -r ./sbmp/* ./ Now, Run the services sudo ./run-services.sh","title":"Basic Installation"},{"location":"installation/#basic-installation-guide-for-seatbelt-and-mobile-phone-system-deployment","text":"","title":"Basic Installation Guide for Seatbelt and Mobile phone System Deployment"},{"location":"installation/#prerequisites","text":"Edge device is flashed with Nvidia JetPack 4.4.0 (Make sure Jetson SDK Components are also installed) Internet Storage (at least 32GB)","title":"Prerequisites"},{"location":"installation/#edge-script-installtion","text":"Power Up your edge device and connect keyboard, mouse, monitor etc. Open terminal CTRL + ALT + T . Check if python3 is installed on device python3 --version . If not follow this link to install Check if nvidia-container-runtime is installed nvidia-container-runtime --version . If it's not installed, then install # Add the package repositories curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # nvidia-container-runtime installation sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit nvidia-container-runtime sudo systemctl restart docker Download Edge Scripts wget GET_LINK_FROM_ABDULLAH Uncompress the downloaded file tar -xvzf AutoDeployment-1.2.0.tar.gz Change directory cd AutoDeployment-1.2.0/edge/ . Check if install.py and dependencies.yaml is present.","title":"Edge Script Installtion"},{"location":"installation/#running-the-edge-script","text":"RUN the install script sudo python3 install.py -d -p . -d flag will install system dependencies like docker, docker-compose and -p flag will set power mode on jetson devices. Now, answer the questions asked in command line. Select storage disk. Choose SD card NAME SIZE MOUNTPOINT UUID mmcblk0p1 14G / eda65433-df7c-4de9-8c4b-9ab2865b4f24 mmcblk1p1 234.7G /media/sdcard a10a85fe-a451-dd4c-b3b0-6862eb17eb56 Choose which disk to use for deployment[1-2]: 2 Select problem type Select the problem you want to deploy: 0: Video Light Phase Detection 1: SeatBelt/MobilePhone 2: Trajectory [0-2]: 1 Type your company name Please enter your company's name: hazenclient Select Power mode on Jetson devices. choose with id=2 ################ Collecting Hardware Info ####################### ## Power Model Selection on Jetson Devices ## ID=0 NAME=MODE_15W_2CORE ID=1 NAME=MODE_15W_4CORE ID=2 NAME=MODE_15W_6CORE ID=3 NAME=MODE_10W_2CORE ID=4 NAME=MODE_10W_4CORE Select Power Model. ID: 2 Now, script will start installing system dependencies. After system dependencies installation, script will install required services. This process may take 20-30 mins .","title":"Running the Edge Script"},{"location":"installation/#running-the-services","text":"Move to following directory cd $SD_CARD_MOUNTPOINT/hazen-test/imagetars/$COMPANY_NAME/ . For example, in this case, I will move to cd /media/sdcard/hazen-test/imagetars/hazenclient/ Run the following command sudo cp -r ./sbmp/* ./ Now, Run the services sudo ./run-services.sh","title":"Running the services"}]}